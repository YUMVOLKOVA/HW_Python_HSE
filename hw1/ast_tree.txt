Module(
  body=[FunctionDef(
    name='fibonacci',
    args=arguments(
      posonlyargs=[],
      args=[arg(
        arg='n',
        annotation=None,
        type_comment=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[]),
    body=[
      Assign(
        targets=[Name(
          id='list_with_numbers',
          ctx=Store())],
        value=List(
          elts=[
            Constant(
              value=0,
              kind=None),
            Constant(
              value=1,
              kind=None)],
          ctx=Load()),
        type_comment=None),
      If(
        test=Compare(
          left=Name(
            id='n',
            ctx=Load()),
          ops=[Eq()],
          comparators=[Constant(
            value=1,
            kind=None)]),
        body=[Return(value=Subscript(
          value=Name(
            id='list_with_numbers',
            ctx=Load()),
          slice=Index(value=Constant(
            value=0,
            kind=None)),
          ctx=Load()))],
        orelse=[If(
          test=Compare(
            left=Name(
              id='n',
              ctx=Load()),
            ops=[Eq()],
            comparators=[Constant(
              value=2,
              kind=None)]),
          body=[Return(value=Subscript(
            value=Name(
              id='list_with_numbers',
              ctx=Load()),
            slice=Index(value=Constant(
              value=1,
              kind=None)),
            ctx=Load()))],
          orelse=[
            For(
              target=Name(
                id='i',
                ctx=Store()),
              iter=Call(
                func=Name(
                  id='range',
                  ctx=Load()),
                args=[
                  Constant(
                    value=1,
                    kind=None),
                  Name(
                    id='n',
                    ctx=Load())],
                keywords=[]),
              body=[Expr(value=Call(
                func=Attribute(
                  value=Name(
                    id='list_with_numbers',
                    ctx=Load()),
                  attr='append',
                  ctx=Load()),
                args=[BinOp(
                  left=Subscript(
                    value=Name(
                      id='list_with_numbers',
                      ctx=Load()),
                    slice=Index(value=Name(
                      id='i',
                      ctx=Load())),
                    ctx=Load()),
                  op=Add(),
                  right=Subscript(
                    value=Name(
                      id='list_with_numbers',
                      ctx=Load()),
                    slice=Index(value=BinOp(
                      left=Name(
                        id='i',
                        ctx=Load()),
                      op=Sub(),
                      right=Constant(
                        value=1,
                        kind=None))),
                    ctx=Load()))],
                keywords=[]))],
              orelse=[],
              type_comment=None),
            Return(value=Name(
              id='list_with_numbers',
              ctx=Load()))])])],
    decorator_list=[],
    returns=None,
    type_comment=None)],
  type_ignores=[])